What happens when you initialize a repository? Why do you need to do it?

How is the staging area different from the working directory and the repository?
What value do you think it offers?

Q: How can you use the staging area to make sure you have one commit per logical
change?
A: You can use "git add <filename>" whenever you are done with file. This way 
your changes later on the file would not get into commit by mistake.
What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?
Diagrams help us to see the direction of relationship between commits. They 
also show what "git log" can not show because of limitations.
What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

GIT CONCEPTS RECAP
  1. GIT REPOSITORY: 
     Repository is a working directory for git. It includes all
     user provided files that are served by git version control system and some
     git specific files(under ..git directory). The .git folder contains all 
     the information that is necessary for your project in version control and 
     all the information about commits, remote repository address etc. It also
     contains a log which stores your commit history so that you can roll back
     to history.Any directory can be Git Repository. Just create a directory or
     navigate into one. Once you are in desired directory, use command 
     "git init" to convert it to Git repository.
  
  2. STAGING AREA:
     Git allows even more control before committing changes. To commit changes
     in the files, use "git add <filename>" command to add them into staging 
     area. Files put into staging area are will be committed to repository when
     "git commit" command is used.
     Users do not have to add all their changed files into staging area and 
     might want to include some changes in another commit. When you add files
     to staging area, git takes a snapshot of that file in that time, meaning
     changes on a file that is added to staging area does not affect the 
     version in the staging area.
       - "git reset HEAD -- <file>" : remove files from staging area.
       - "git diff --cached" : show the changes between last commit and the 
         files in the staging area.
       - "git diff" : Show the changes between working files and staged files
  
  3. ADD
     "<git add <filename>" command adds the file's current version into staging
     area. Only changes in the staging area is candidate to be committed. 
     "git reset HEAD -- <file>" command reverses this 
  4. COMMIT:
     Commits are snapshots of the files at the time when <git commit> command
     is used. Only the changes in the staging area are committed. It can be 
     summarized as "commit_next = commit_current + staging_area". When 
     committing, Git asks user to enter a short comment about changes and 
     after that, commit is created. You can also use 
     "git commit -m "Commit Message" to add comment preemptively. Git commit 
     messages are generally in the command format like "Add a cake recipe".

     Note that Git does not commit the latest version of file in the working
     directory. It commits latest version in staging area. So it is possible
     that changing a file after putting it into staging area. When you commit,
     changes after staging is not saved into repository. Those changes are not
     also lost after commit as Git does not modify the files in the working.
     See the example below;

     Filename                    : lesson
     Content in working directory: "abc"
     git add lesson              : add lesson to staging area
     Content in staging area     : "abc"
     Change content in work dir  : "abcdef" (Content changed after staging)
     Content in working directory: "abcdef"
     Content in staging area     : "abc"    (Staging area is not affected)
     git commit                  : commit the changes in staging area
     Content in repository       : "abc"    (Only staged changes committed)
     Content in working directory: "abcdef" (Last version is preserved)

     HOW TO WRITE A COMMIT MESSAGE
     + Keep messages short.
     + Explain what commit does. Think it as second part of "This commit will".
     + Be consistent at writing commit messages.
     - Do not explain why the changes are made. But if you really need to 
       explain, after the message leave one line blank and write the body for
       explanation. In oneline mode, only first line(heading) of the message
       will be shown.
     - Do not explain how the changes are made.
     - Do not use word "and". It means you are doing too much..
  5. CLONE:
     "<git clone <repository_url>" command clones the repository with given url
     to local storage. Clone also brings whole history of the repository.
  6. DIFF
     - "git diff <commit1> <commit2>" command shows the changes from left to 
       right. It can be summarized as; 
       git diff  <commit1> <commit2> = <commit2> - <commit1>
     - "git diff --cached" : show the changes between last commit and the 
       files in the staging area. Synonim for --staged.
     - "git diff" : Show the changes between working files and staged files.
     Note: Git tracks changes by lines. If a line is modified even by one 
     letter, git shows old version as removed and new version as added.

  7. STATUS
     <git status> command shows modified/deleted/added/untracked files and 
     files in the staging area and general info about current branch.

  8. LOG
     "git log" command shows commit history as commit SHA1 key, author name and
     email, date and commit comment.
     
     To navigate the log;
     - j(or down arrow) to move down one line at a time
     - d to move down by half the page screen
     - f to move down by a whole screen
     - k(or down arrow) to move up one line at a time
     - u to move up by half the page screen
     - b to move up by a whole screeni
     - q to quit the log

     --oneline: To print "git log" in one line use --oneline flag after 
       "git log". Oneline format has shorter SHA-1 key(first 7 character) and 
       commit message only.
     --graph: Prints ancestory lines between commits. By default, commits are 
        shown in chronological order.
     --stat: In addition to default log, --stat flag lists the files that were changed
       as well as the number of added/removed lines.
     -p: This flag also commands log to show actual differences for each commit.    
     -n1: This flag allows to select number of commits to be listed.
     -<SHA-1 Key>: With SHA-1 key of commit, git log will start listing commits
                   from the commit number given instead of HEAD.




  9. WORKING DIRECTORY
     Working directory is the directory on the local storage. It shall not be 
     understood as last commit or repository etc. For further information, 
     refer to 1, 2, 3, 4.

  10. BRANCH
      When you want to experiment some feature on the project you work or 
      simply want to make changes in an isolated(to master) fashion, you can
      create branches for the task. Branches are simply labels for commits.
      
      The default branch is the master branch when a git repository is 
      initialized and it is generally main branch. If you recall the warning 
      message about "detached HEAD state", it means you are on a commit that is
      not labeled with a branch name. Git warns user because of commits done 
      onto this commit will not be done on master branch. 

      You can checkout to a branch like you can checkout to a commit. Use 
      "git checkout <bracnh_name>". When you commit to the new branch, label
      is applied to new commit also. So checking out branch will not go to
      root of the branch but to tip of that branch.
      Note: Remember to checkout to the branch after creating it. Git does not
      automatically checkout to the newly created branch. You can use 
      "git checkout -b <branch_name>" to automatically checkout after creation.
      Note: You can use "git branch" to list all branches and the checked-out 
      one(annotated with *).

      Branches(or commits in general can also see their ancestor commits. They
      don' t see if they are not merged.

      - "git branch <branch_name>": Creates a branch from the most recent 
        commit.
      - "git branch <branch_name> <commit_SHA1_key>": Creates a branch from 
        given commit.
      - "git checkout -b <branch_name>": Automatically checks out to branch
        created. "checkout -b" can be used with commit SHA1 key too.
      - "git branch -d <branch_name>": Deletes the branch with given name.
      - "git branch": Lists all branches in repository. Git does not allow to
        delete a branch which has commits are not any other branch(merged). Git
	also does not allow you to delete the branch you are currently on.

  11. MERGE
      When there are multiple branches and each of them have changes on them,
      to incorporate changes from one branch to another is called merging.
      There are two types of merges exist: regular merge and fast forward. 
      Regular merge happens when you merge two branches that have at least one
      commit after the commit they are seperated(the commit used as branch's 
      starting point). Fast-forward occurs when only one branch has commits 
      after seperation commit. Also if the branch you want to merge in has
      reachability to your current branch, merge operation will be 
      fast-forward.

      Simple merge logic is like below:

      File Content(As lines)
      Original : ABD
      Jake     : BDE
      Rachel   : ABCD
      
      Line analysis
      A: Jake deleted this line. This line shall NOT be in the final version.
      B: This line exists in both versions. It shall be in the final version.
      C: Rachel added this line. It shall be in the final version.
      D: This line exists in both versions. It shall be in the final version.
      E: Jake added this line. It shall be in the final version.

      However, merges may not be automatically completed by Git when conflict
      happens. Conflict happens when exact same lines are modified by branches
      joining the commit. Git can not decide automatically, so leaves the 
      decision to user.

      To merge two different branches, follow the list below;
      1. Checkout to the branch you wanna update with changes from the other.
      2. Type "git merge <branch_to_update> <branch_has_change>.
      3. If there is a conflict go to step 4, if not, go to step 6.
      4. Resolve the conflicts and save the files.
      5. Add the files to staging area and commit them. END!
      6. Git automatically merges commits. END!

      If there is a conflict happens during merge, Git modifies the conflicted
      files with some symbols to show what is the version of the file segment
      in branch being updated, branch being merged in and their common 
      ancestor.
       
      Example of modified conflicted file is below
      /code
        <<<<<<< HEAD
        foo
        ||||||| merged common ancestors
        zor
        =======
        bar
        >>>>>>> <branch_has_change> 
      /code

      Code segment "foo"(annotated with <<<<<<<) belongs to the branch being 
        updated.
      Code segment "zor"(annotated with |||||||) belongs to original lines before
        being changed by both branches.
      Code segment "bar"(annotated with =======)  belongs to the branch being
        merged in.
      HEAD means the branch currently checked out <branch_to_update>.

      A note about git merge:
      "git merge" will also include the currently checked-out branch in the 
      merged version. So if you have branch1 checked out, and you run "git 
      merge branch2 branch3", merged version will combine branch1 as well as 
      branch2 and branch3. That’s because the branch1 label will update after 
      you make the merge commit, so it’s unlikely that you didn’t want the 
      changes from branch1 included in the merge. For this reason, you should 
      always checkout one of the two branches you’re planning on merging before 
      doing the merge. Which one you should check out depends on which branch 
      label you want to point to the new commit.

      Since the checked-out branch is always included in the merge, you may 
      have guessed that when you are merging two branches, you don't need to 
      specify both of them as arguments to git merge on the command line. If 
      you want to merge branch2 into branch1, you can simply git checkout 
      branch1 and then type git merge branch2. The only reason to type git 
      merge branch1 branch2 is if it helps you keep better mental track of 
      which branches you are merging.

      Also, since the two branches are merged, the order in which they are 
      typed into the command line does not matter. The key is to remember that
      git merge always merges all the specified branches into the currently 
      checked out branch, creating a new commit for that branch.

      When a merge happens, Git will:
        - Look at the branches that it's going to merge
        - Look back along the branch's history to find a single commit that 
          both branches have in their commit history
        - Combine the lines of code that were changed on the separate branches
          together makes a commit to record the merge

      In general, it’s very common that if you make a branch, either an 
      experimental branch or to work on a new feature, you want to periodically
      merge master into that branch. This is because master usually contains 
      the official version of the code, and it’s common to want experimental 
      changes to include all of the changes to master.

      Note: If you made a merge on wrong commits, to reset it: type
      "git reset --hard HEAD^".
  
  12. SHOW
      "git show" commit will show only one commit. Its output is exactly same
      as "git log -p". Without any argument, it will show the most revent 
      commit(does not have to be tip of the current branch, last checked out
      commit is better expression).
      "git show <commitSHAKey>" command shows changes between commit and its 
      parent.
      
      --patch:Or -p, is default with "git show"
      --stat: With this flag, patch information(change between commits simply)
        will not be shown. To add patch information, add -p again.
      -w: Ignore whitespaces.
  13. CHECKOUT
      Checkout is one of the most important commands in Git. It allows users
      to navigate between branches or commits. Type "git checkout <branch_name"
      or "git checkout <commit_SHA1_key>" to navigate to a certain branch or
      a commit. Commit parameter does not have to be written fully. You can
      write first 'n' characters that are unique to that commit among all 
      commits in the repository.

WHAT IS IN .GIT FOLDER
Git VVS creates .git folder when a folder is initialized as Git repository. 
Here are the contents of .git directory.
  - HEAD: This file points to current branch you checked out.Example content;
    /code
      ref: refs/heads/master
    /code
  
  - config file: All project specific configuration settings are stored. Git 
    looks for configuration file in the Git directory(.git/config) of the 
    repository you are currently using. These are repository(project) specific.
    Example content;
    /code
      [core]
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
        ...
    /code
  
  - description file: This file is used by GitWeb program. Example content;
    /code
      Unnamed repository; edit this file 'description' to name the repository.
    /code
  
  - hooks directory: This directory may include client/server-side scripts that
    can be used to "hook"(like callback) into Git's different lifecycle events.
    Some examples like pre-commit.sample, pre-push.sample exist.Example content
    /code
      applypatch-msg.sample*  post-update.sample*     pre-commit.sample*
      pre-push.sample*    pre-receive.sample* commit-msg.sample*      
      pre-applypatch.sample*  prepare-commit-msg.sample*  pre-rebase.sample*  
      update.sample*
    /code  
  
  - info directory: Contains global excludes. Can be used to exclude 
    intermediate files like .s, .o, .a etc.
    /code
      $ cat info/exclude
      # git ls-files --others --exclude-from=.git/info/exclude
      # Lines that start with '#' are comments.
      # For a project mostly in C, the following would be a good set of
      # exclude patterns (uncomment them if you want to use them):
      # *.[oa]
      # *~
    /code
  - objects directory: Contains all the commits we have made.
  - refs directory: this directory hold pointers to commits(basically branches
    and tags)
  Note: Other than hooks directory is the only place where users should modify
        in .git directory.
  
INTERNALS OF GIT
"Git is fundamentally a content-addressable filesystem with VCS user 
interface written on top of it.
GIT OBJECTS
  BLOB OBJECTS
  Git is a content-addressable file system. It means that at the core of Git is
  a simple key-value data store. Objects are given a SHA1 key which is checksum
  of the content plus a header when they are added to Git VCS. This part is 
  important, in these objects filename is not stored.

  TREE OBJECTS
  Tree objects solve problem of storing the filenames and allows you to store
  a group of file together. Every tree object contains one or more tree entries
  (each of which contains a SHA-1 pointer to a blob or subtree with its 
  associated mode, type and filename) and blob entries representing blob objects
  under that tree. Tree entries can be seen as representing directories and blobs
  represent files.

  COMMIT OBJECTS
  The format for a commit object is simple: it specifies the top-level tree for 
  the snapshot of the project at that point; the author/committer information 
  (which uses your user.name and user.email configuration settings and a 
  timestamp); a blank line, and then the commit message.Example of 
  commit/tree/blob objects looked into with "git cat-file -p <object_key>".
  /code
    ## looking at the content of commit object starts with 7b29
    $ git cat-file -p 7b29
    tree 8929d876b843b46941ebdffab9f70ecbd3c119a5
    parent ce599169dffac4ed76ef2f48469545eb42827afb
    parent 71fd16ec579a87d6426e9651855c9c1c4b13a03d
    author Cagri Kose <mehmetcagrikose@gmail.com> 1503943895 +0300
    committer Cagri Kose <mehmetcagrikose@gmail.com> 1503943895 +0300

    Merge commit '71fd16e'

    ## Looking at the content of tree object in the commit above
    ## Tree object in the commit is basically top level directory of that commit
    ## We can see two files and one directory is in this directory
    git cat-file -p 8929
    100644 blob 399c3df580bda95732e26f29653bfab85b426e89    README.md
    100644 blob 7e23a6a9f2fa053def4534a208acca783141e8e3    git.txt
    040000 tree 7d82442565bc531c8ce9cd981e5ee64cf4d51c5d    reflections

    ## We can see two blob in the tree above(reflections)
    $ git cat-file -p 7d82
    100644 blob 4eb7a69d3ad1a37503fc0084de8be612d0b14d80    lesson1
    100644 blob 26195f9d856746c5751f98df264b2fdbf751eb0b    lesson2

    
    ## Finally we look into git.txt object with its key
    This file is created for Git tutorials.
  /code

REFERENCES
References are files in which you can store the SHA-1 value under simple name
so you can use that pointer instead of remembering 40 character SHA-1 key. 
Under .git directory, there is /refs directory which in turn contains two 
directories called /heads and /tags. /heads directory contains the latest 
commits(?) in master branch and other branches.
  HEAD: This is a symbolic reference to last commit you checked out. HEAD file
  can point to master branch's tip, other branches' tip or any other commit 
  which is not a tip for any branch. Example content of HEAD is below;
  /code
    ## Content of HEAD when you checked out master branch
    $ cat ../../HEAD
    ref: refs/heads/master

    ## Content of HEAD when you checked out any non-master branch
    $ cat .git/HEAD
    ref: refs/heads/ZeroOrdering

    ## Content of HEAD when you checked out any non-tip commit
    $ cat .git/HEAD
    a9864bcfd310d72adb42c2b793e407640be1eee8
    /code
    Note that when you are on tip of any branch(master or non-master), HEAD
    file points to "/refs/heads" directory instead of SHA-1 key.

TAGS
The tag object is similar to commit object. Contents of it are tagger, date, 
message and pointer to a commit(Note that commit points to tree object). Tags
are like branch references but unlike branch references
(master, ZeroOrdering etc) tags are not updated to any other commit after new 
commit is made. They point to same commit until user updates them to a new one.

GIT PACKFILES
When you modify a file and commit it, Git creates a second file of similar size
compared to original. Git stores modified versions of files in "loose object"
format. Loose object format is a format without any compression. But Git can
store the initial file as whole then modified versions with only delta compared
to original file. Git does this when you have too many "loose objects" in 
repository, manually command "git gc" or when you push to a remote repository.

GIT IGNORE FILES
Sometimes we add files into the directory where Git repository is stored but we
do not want them to be handled by Git. To tell Git to ignore files, we can use
<.gitignore> file. <.gitignore> works same as ".git/info/exclude" but with one
difference. <.gitignore> is specific to project and when the repository is 
cloned, it is cloned too. Files/patterns in the <.gitignore> kind of  
project-wide decision. On the other hand, ".git/info/exclude" is local. 
Look at the list below to create patterns for ignore files in both methods;
1- '*'   matches 0 or more characters
2- '?'   matches 1 or more characters
3- [abc] matches a or b or c
4- '**'  matches nested directories like "a/**/z"

Example pattern to ignore all ".jpg" files under sample folders and its 
subfolders: "samples/**/*.jpg".

TAGS(CONCEPTUAL)
Tags can be seen as static versions of branches. Branches themselves were 
simply labels for commits if you remember. With tags, we can point to commits
with hopefully more descriptive labels.
There are two types of tags: lightweight and annotated. 
  - Lightweight tag: Only the label
  - Annotated tag  : label, the person who tagged and date.
Annotated tags are generally superior to lightweight tags with more info. 
  - "git tag -a <tag_label>": Create an annotated tag for current commit. "-a"
    flag is for choosing annotated tag. If you do not use it, you create 
     lightweight tag.  
  - "git tag": List the tags in the repository.
  - "git tag -d <tag_label>": Delete the given tag.
  - "git tag -a <tag_label> <commit_key>": Create a tag for another commit. Use
    this to create a tag without checking out that particular commit.

HEAD
HEAD is the pointer that points to most recent commit. You can see where HEAD
points to with git log command. When you do a commit, you can understand where 
will the commit applied to by checking HEAD. 

Example outputs of git log related to HEAD;
/code
## When on a branch, HEAD points to tip of the branch and "git log" prints the
## name of the branch alongside "HEAD".
$ git log
commit 729c9d3ca92333cd2a45ccc6f4fe9a035fd568fb (HEAD -> EasyMode)

## When on a random commit(that is not tip of any branch), "git log" prints 
## "HEAD" only.
$ git log
commit 1ebe1183cefb642f2ad45444b98b3b0528b5f24c (HEAD)
/code

UNDOING CHANGES
Git allows us to undo some of the changes. Let's see these commands.
  AMEND
  This flag allows us to modify the most recent commit. You might have 
  forgotten to include some changes in the last commit or simply you did not
  like something about last commit. This is the command you should use.
  
  If your working directory is clean, meaning you have not changed any files
  after last commit, using "git commit --amend" will allow you to write new
  commit message and commit it when you save it. But this just changes commit
  message and it is not real purpose of amend.

  To include changes that you want to add to last commit, follow the steps;
  1- Edit/add/delete files
  2- Save all changes
  3- Add files to staging area
  4- Type "git commit --amend" 

  This way, without creating a new one: you can change last commit. But notice
  that you are replacing old commit with a new one instead of doing things you 
  wanted to do in two consecutive commits. Your last commit will still change
  since you modified files and possibly commit message. This will result in new
  SHA-1 key for commit also. 

  When you check the difference comes with this commit, you will see that it 
  shows differences of original commit plus differences of amending commit.

  GIT REVERT
  This flag allows us to revert any commit meaning, reverting any changes done
  with the given commit and creates a new commit. This part is important: it
  makes the opposite changes of a commit with given SHA-1 key and makes a new 
  commit.
 
  To revert a commit, type "git revert <commit_SHA1_key>".
  
  How does reset work on merge commit: In this special case, user needs to 
  enter extra parameters to tell Git which parent's changes you want to keep.
   
  - "git revert -m 1 <merge_commit>": Git reverts the changes coming from 
    second commit. 
  - "git revert -m 1 <merge_commit>": Git reverts the changes coming from 
    first commit. 

  GIT RESET
  This command allows us to reset the commit given. Resetting means cancelling 
  last commit operation but according to the parameters used, changes of reset
  commit maybe saved or deleted. But before delving into the details of reset,
  let's consider relative commit references in Git.
    RELATIVE COMMIT REFERENCES
    Most of the Git commands take commit SHA-1 key, tags, branch names and the
    HEAD pointer to refer a commit. But sometimes we will need to refer a 
    commit by another known commit. Since Git commits only know their ancestors
    direction of references called ancestry references. Both '^' and '~' 
    characters are used to refer to ancestor commits but there is a nuance 
    between them when they take a number to the right of them. For sake of 
    understanability parent and ancestor commit terms will be used.

    *parent: The commit or commits one level before current commit. Remember
             that merge commits have two parents. After merge, only one branch
             moves(gets updated). First parent commit means the parent commit
             belongs to same branch as current commit. Second parent means(only
             meaningful for merge commits) the parent commit belongs to other
             branch joining the merge operation(merged-in branch to be exact)
    *ancestor: The commit 'n'th level parent of current commit. For example:
             '~2' means parent of parent commit.

    - '^' : This is simply parent commit. By default, this is equal to "^1"
    - '^n': 'n' is extra parameter to represent order of immediate parents.
            'n1' is first parent and 'n2' is second parent.
    - '~' : This is simply parent commit. By default, this is equal to "~1"
    - '~n': This is 'n'th level ancestor commit. Ancestry follows through 
            current branch.

    Note: At first sight ancestry references are hard to understand without a
          visual example. So check the example below to understand better.
    /code
      * commit dd968cf87826467720289d92dbd1f41d52029196(HEAD->master) 
      |
      * commit 97c068106eafac151164967b0ee0a1a7f134c52b
      |
      *   commit 7b2995e1b08392a6f8505e32bb3d598d589c7c13
      |\  
      | * commit 71fd16ec579a87d6426e9651855c9c1c4b13a03d
      | |
      | * commit e9651855c9c1c4b13a03d71fd16ec579a87d6426
      | |
      * | commit ce599169dffac4ed76ef2f48469545eb42827afb
      |/  
      |   
      * commit 2642e7676554417062ad26e69415760823f2c260
      |  
    /code
    
    Lets write down various references to each commit above. First 4 letters of
    SHA-1 keys will be used as simplicity
    
      Commit Name       Ref_1       Ref_2       Ref_3       Ref_4
    -   dd96            HEAD~0
    -   97c0            HEAD^       HEAD^1      HEAD~       HEAD~1
    -   7b29            HEAD^^      HEAD^^1     HEAD~2
    -   71f1            HEAD^^^2    HEAD~2^2 
    -   ce59            HEAD^^^     HEAD~3      HEAD~2^     HEAD~2^1
    -   e965            HEAD^^^2^   HEAD~2^2^ 
    -   2642            HEAD^^^^    HEAD~4      HEAD~2^2^^

    Note that you can use '^' and '~' in mixed format to traverse all commit 
    history without referring to commits by their SHA-1 key.


  - "git reset --mixed HEAD^": This cancels the changes the current commit makes
                               and puts them into working directory. Useful when
                               you want to modify files that you are already 
                               committed with current commit.
  - "git reset --soft HEAD^" : This cancels the changes the current commit makes
                               and puts them into staging area. Useful when you 
                               don' t want to modify files that changed in the 
                               last commit but want to do another thing like 
                               adding new files or changing commit message etc.
  - "git reset --hard HEAD^" : This cancels the changes the current commit makes
                               and puts them into trash. This is a serious 
                               operation and users are suggested to create a 
                               branch at current commit before doing this 
                               operation.

  How does reset work on merge commit: In this special case, Git saves the 
  changes that belong to reset commit into a working directory or staging area
  depending on your flag cohice for reset operation(mixed or soft, with hard 
  changes are gone).When you commit these changes, you will merge changes of 
  branches without actually merging branches.

