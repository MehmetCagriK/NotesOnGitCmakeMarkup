What happens when you initialize a repository? Why do you need to do it?

How is the staging area different from the working directory and the repository?
What value do you think it offers?

Q: How can you use the staging area to make sure you have one commit per logical
change?
A: You can use "git add <filename>" whenever you are done with file. This way 
your changes later on the file would not get into commit by mistake.
What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

GIT CONCEPTS RECAP
  1. GIT REPOSITORY: 
     Repository is a working directory for git. It includes all
     user provided files that are served by git version control system and some
     git specific files(under ..git directory). The .git folder contains all 
     the information that is necessary for your project in version control and 
     all the information about commits, remote repository address etc. It also
     contains a log which stores your commit history so that you can roll back
     to history.Any directory can be Git Repository. Just create a directory or
     navigate into one. Once you are in desired directory, use command 
     "git init" to convert it to Git repository.
  
  2. STAGING AREA:
     Git allows even more control before committing changes. To commit changes
     in the files, use "git add <filename>" command to add them into staging 
     area. Files put into staging area are will be committed to repository when
     "git commit" command is used.
     Users do not have to add all their changed files into staging area and 
     might want to include some changes in another commit. When you add files
     to staging area, git takes a snapshot of that file in that time, meaning
     changes on a file that is added to staging area does not affect the 
     version in the staging area.
       - "git reset HEAD -- <file>" : remove files from staging area.
       - "git diff --cached" : show the changes between last commit and the 
         files in the staging area.
       - "git diff" : Show the changes between working files and staged files
  
  3. ADD
     "<git add <filename>" command adds the file's current version into staging
     area. Only changes in the staging area is candidate to be committed. 
     "git reset HEAD -- <file>" command reverses this 
  4. COMMIT:
     Commits are snapshots of the files at the time when <git commit> command
     is used. Only the changes in the staging area are committed. It can be 
     summarized as "commit_next = commit_current + staging_area". When 
     committing, Git asks user to enter a short comment about changes and 
     after that, commit is created. You can also use 
     "git commit -m "Commit Message" to add comment preemptively. Git commit 
     messages are generally in the command format like "Add a cake recipe".

     Note that Git does not commit the latest version of file in the working
     directory. It commits latest version in staging area. So it is possible
     that changing a file after putting it into staging area. When you commit,
     changes after staging is not saved into repository. Those changes are not
     also lost after commit as Git does not modify the files in the working.
     See the example below;

     Filename                    : lesson
     Content in working directory: "abc"
     git add lesson              : add lesson to staging area
     Content in staging area     : "abc"
     Change content in work dir  : "abcdef" (Content changed after staging)
     Content in working directory: "abcdef"
     Content in staging area     : "abc"    (Staging area is not affected)
     git commit                  : commit the changes in staging area
     Content in repository       : "abc"    (Only staged changes committed)
     Content in working directory: "abcdef" (Last version is preserved)

  5. CLONE:
     "<git clone <repository_url>" command clones the repository with given url
     to local storage. Clone also brings whole history of the repository.

  6. DIFF
     - "git diff <commit1> <commit2>" command shows the changes from left to 
       right. It can be summarized as; 
       git diff  <commit1> <commit2> = <commit2> - <commit1>
     - "git diff --cached" : show the changes between last commit and the 
       files in the staging area.
     - "git diff" : Show the changes between working files and staged files.
  7. STATUS
     <git status> command shows modified/deleted/added/untracked files and 
     files in the staging area and general info about current branch.

  8. LOG
     <git log> command shows commit history as commit SHA1 key, author name and
     email, date and commit comment.

  9. WORKING DIRECTORY
     Working directory is the directory on the local storage. It shall not be 
     understood as last commit or repository etc. For further information, 
     refer to 1, 2, 3, 4.

  10. BRANCH
      When you want to experiment some feature on the project you work or 
      simply want to make changes in an isolated(to master) fashion, you can
      create branches for the task. Branches are simply labels for commits.
      
      The default branch is the master branch when a git repository is 
      initialized and it is generally main branch. If you recall the warning 
      message about "detached HEAD state", it means you are on a commit that is
      not labeled with a branch name. Git warns user because of commits done 
      onto this commit will not be done on master branch.
      FALSE COMMIT

      
