# This file is created to write reflections about Github.
When interacting with GitHub, information you send and receive is in the form
of Git commits. Changes must be committed before they are sent to Github 
repositories.
Similar to commits, Github allows users when to synchronize Github and local
repositories. 
Git has a concept of remote repository. Remote repository is a repository 
that's location is known and you want to send commits to or get commits from.
The most common way of sending commits is pushing a branch. When you push a
branch or a commit, git will start from the commit or tip of branch and send 
all commits reachable until it encounters a commit in Github repository. 
Remember that a git commits with same SHA-1 keys are the same commits with same
history. So Git does not bother checking if commit SHA-1 keys are equal. It 
knows already that history and content is the same.

Let's see the steps below needed before we use remote repositories.
1- First create an empty GitHub repository
2- Copy the URL of the repository to clipboard
3- Add newly created GitHub repository as remote repository with a name.
   /code
     ## origin is choosen by user
     $ git remote add  origin https://github.com/MehmetCagriK/Reflections2
   /code
4- Check if remote repository is added succesfully with "git remote -v"
   /code
     ## -v means verbose(more information). This flag shows URL's to fetch
     ## and push.

     $ git remote -v
     origin  https://github.com/MehmetCagriK/Reflections2 (fetch)
     origin  https://github.com/MehmetCagriK/Reflections2 (push)
   /code
5- Save your GitHub credentials(username/password) in Git, so you don' t have 
   to enter again and again.
   /code
     git config --global credential.helper wincred
   /code
6- Push one of your branches in your local repository into remote repository.
   /code
     $ git push origin master
   /code
7- Pull one of the branches of remote repository into local repository.
   /code
     $ git pull origin master
   /code

QUESTION: When would you want to use a remote repository rather than keeping 
          all your work local?
ANSWER  : Remote repositories are useful for collaboration. People can access
          to your repository, get changes from or send changes to it if it is
	  allowed. Remote repository can also be seen as backup in case of 
	  failure in local computer.

QUESTION: Why might you want to always pull changes manually rather than having
          Git automatically stay up-to-date with your remote repository?
ANSWER  : Pull operation gets latest changes made to remote repository. But 
          when we work on something, we might not want to get latest version 
          without our control since it may create conflicts or break our code
          and we will need to deal with it first.

FORK
  GitHub has a feature called forking. This allows you to copy a repository into
  your account without having download it first than push to your account. To 
  make changes you still need to clone that repository into your computer.
  Some qualities of fork
  1- You can see how many people "forked" your repository.
  2- Forked repositories are linked to original repositories.
  3- You can suggest changes done on fork to original repository.
QUESTION: Describe the differences between forks, clones, and branches. When 
          would you use one instead of another?
ANSWER  : Fork is a copy of GitHub repository in someone else's account. Clone
          is a copy of GitHub repository in local computer. Branch is not copy 
          of anything but a label for branch, used to diverge commit history 
          and to make isolated changes.
          When a person is not allowed to make direct changes on a remote 
          repository, he can fork the repository into his account as it was his
          own repository. GitHub also allows changes suggested by forked 
          repositories to original ones.
          Clone is used to download any remote repository into local computer.
          Question is not structured well i believe.

FETCH
Imagine a scenario where you cloned a repository. Then you made a commit into 
your repository. At the same time, another person made a change to GitHub 
repository. Then you typed "git fetch origin" to get the changes made on remote
repository. Let's see how git status changes for each operation below;

1- You made a commit to local repository. At this point, Git is not aware of 
   the changes made on remote repository and it will say "You are ahead 1 
   commit". Also when you type "git log ", you will see master branch has one 
   more commit ahead of origin/master branch.
2- You fetched changes from the origin. At this point, Git is aware of changes
   in the remote repository. It will say "Your branch and 'origin/master' have
   diverged, and have 1 and 1 different commits each, respectively.". If you 
   made conflicting changes, you need to merge both branches manually to 
   resolve conflict.
   Note: Fetch operation updates 'origin/master' branch instead of updating 
   both 'origin/master' and 'master'.
3- Now you both made a commit on top of last common commit and you want to 
   merge. There is a shorter way instead of fetching then merging. Type 
   "git pull origin" to automatically fetch then merge operation in one 
   command.

QUESTION: What is the benefit of having a copy of the last known state of the
          remote stored locally?  
ANSWER  : Having a last known state allows developers to be aware of state
          of latest state of project so when they make changes locally, they
          will be aware of conflicting changes before hand. Also having the 
          latest changes have benefits as usual.
          
PULL REQUEST
GitHub provides a useful feature to have feedback on changes before pushing
them into remote repository's master branch. Just make your changes isolated
in a branch, than push it to remote repository. Then get to GitHub repository's
web page. Switch to your newly pushed change branch, and click "Pull Request".

Pull request will notify the owner of that repository. The owner then can 
review your changes and if he/she agrees to merge changes into his repository,
owner can accept merging or reject. 

**Question:** How would you collaborate without using Git or GitHub? What would
be easier, and what would be harder?
**Answer:** An option(however a bad one) would be sharing my project files with 
others by sending them as whole. This would be far slower than using Git/GitHub.
I would also use another decentralized version control system like Mercury.

**Question**: When would you want to make changes in a separate branch rather 
than directly in master? What benefits does each approach have?
**Answer**  : If my planned work is linear, like not an experimental work, I 
would prefer working on master branch. This saves me trouble of merging a branch
into master when I know this work will not be optional. Other than that, if I am
working on an experimental path, without considering collaboration with other 
people I would still use branching and keep my master branch clean of any 
experiments. Branching would also lead to clearer collaboration with other 
people if we especially working on a professional project and want to keep 
master lean and tidy.

