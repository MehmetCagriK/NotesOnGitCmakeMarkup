WHY TO USE VERSION CONTROL SYSTEMS

  Version Control systems are used to save different versions of files as they 
  change through time. VC systems allow us to restore older versions of files
  or compare them between different versions.VC systems also optimizes storage
  of these versioned files so they are not same as saving each versions of the 
  files as they are in seperate directories. They save difference between files.

DIFF COMMAND AND USAGE
  diff: This command allows us to compare two different files and show 
  differences. Example usage is like this

/code
  diff game_old.js game_new.js
/code

And the output of diff looks like this

/code
  7d6
  <   13: 'enter',
  9a9
  >   38: 'up',
  395c395
  <     if (KEY_STATUS.spacr) {
  ---
  >     if (KEY_STATUS.up) {
  409c409
  <     if (KEY_STATUS.enter) {
  ---
  >     if (KEY_STATUS.space) {
  922c922
  <         KEY_STATUS.space = false; // hack so we don't move right away
  ---
  >         KEY_STATUS.space = false; // hack so we don't shoot right away
/code
Note: I do not understand how to extract information from the text block above.
But I will update this note later when I understood analyzing diff text.

QUESTION 1:
How could having easy access to the entire history of a file make you 
a more efficient programmer in the long term?
ANSWER:
Being able to access history of a file allows to remember certain decisions
if these are also supported by documentation(commenting in source code etc).
It also helps to find the reason for suddenly malfunctioning program by 
reverting back to working versions.Once we recognize the fault injecting 
version; it is easy to find and fix the source with the <diff> tool.

WHEN TO COMMIT
Git VCS has commits which are used to save changes made to the current version
of the file. Git commits are suggested to be small, easier to understand piece 
of changes. Each commit should represent a logical change.
To commit a file or files, follow the sequence below
  1. Save changes to files who are changed
  2. Add the files to staging are;
     /code
       git add <filename>
     /code
     Staging area is a region where the files are held before they are 
    committed.
  3. Commit the files;
     /code 
       git commit
     /code
     Note that files that are not in the staging area are not committed.
     Note: The note above is simply false and misleading, Git commits files
     regardless of them being in staging area or not. But the purpose of 
     staging area is choosing which changes to commit. For example, if a file
     is updated but it is not put into staging area before commit, that update 
     will not be saved with that commit.

QUESTION 2:
Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file 
separately?
ANSWER:
Repository is a directory(collection of files and folders) under the 
responsibility of Git VCS when it is initialized as Git repository 
via git bash command;
  
  /code
    git init
  /code

Note that you need to change directory to the directory you want to be 
initialized as Git repository.

Git saves all files' current version in repository when there is a commit. The
reason why Git saves ALL files at once is those files are meaningful when
they are together. So committing only one file does not make any sense in
development point of view.

QUESTION: 
How can you use the commands git log and git diff to view the history of files?
ANSWER:
When you use <git log> command(with optional parameters) you can see the commit
history of the repository. Commit history includes commit IDs which we can use
to identify commits in git diff command. Consider example output below

/code
  $ git log

  commit 4e6648efa123e3c74caf4db31bd8f56ca6f3b5db
  Author: Cagri Kose <mehmetcagrikose@gmail.com>
  Date:   Sun Aug 27 12:40:33 2017 +0300

      Adding README.md.

  commit 5ab21b390588769ebf05cc2adc6d888ab4715aef (ZeroOrdering)
  Merge: 8c5ae16 a9864bc
  Author: Cagri Kose <mehmetcagrikose@gmail.com>
  Date:   Sat Aug 26 19:06:21 2017 +0300

  $ git diff 5ab2 4e66

  diff --git a/README.md b/README.md
  new file mode 100644
  index 0000000..399c3df
  --- /dev/null
  +++ b/README.md
  @@ -0,0 +1,5 @@
  +This workplace is created to hold files used for Git-GitHub classes of Udacity
  +in a version control system.
  +There is a <Reflection> directory under this directory. It includes a plaintext
  +file that contains reflections(thoughts on new information learned)
  +There is also <git.txt> file which is a sandbox for testing git system
/code

